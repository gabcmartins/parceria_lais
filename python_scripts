#Volcano Plot
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# 1.Load data files
lfc = pd.read_csv("/content/drive/MyDrive/Dados_colaboração_lais/exported-ancombc-l6/lfc_slice.csv", index_col=0)
qval = pd.read_csv("/content/drive/MyDrive/Dados_colaboração_lais/exported-ancombc-l6/q_val_slice.csv", index_col=0)

# 2. Select data for group of interest 
lfc_values = lfc["groupKnockout-IL1a"]
qval_values = qval["groupKnockout-IL1a"]
neg_log_qval = -np.log10(qval_values)

# 3. Construct base dataframe 
volcano_df = pd.DataFrame({
    'logFC': lfc_values,
    '-log10(qval)': neg_log_qval,
    'qval': qval_values
}, index=lfc.index)

# 4. Extract phylum
def extract_phylum(taxon_str):
    for part in taxon_str.split(";"):
        if part.startswith("p__"):
            return part[3:] if part[3:] else "Unassigned"
    return "Unknown"

volcano_df["classe"] = volcano_df.index.to_series().apply(extract_phylum)

# 1. Create color column: class if qval < 0.05, otherwise "Non Significant"
volcano_df["cor_plot"] = np.where(volcano_df["qval"] < 0.05, volcano_df["classe"], "Não Significativo")

# 2. Create manual color pallet, except for "Non Significant"
classes_significativas = volcano_df.loc[volcano_df["cor_plot"] != "Não Significativo", "cor_plot"].drop_duplicates()
import random

classes_significativas = list(classes_significativas)
random.shuffle(classes_significativas)  # embaralha as classes
cores = {classe: cor for classe, cor in zip(classes_significativas, sns.color_palette("tab10", 10))}
cores["Não Significativo"] = "lightgray"

# 3. Plot
plt.figure(figsize=(12, 7))
plot = sns.scatterplot(data=volcano_df, x="logFC", y="-log10(qval)",
                       hue="cor_plot", palette=cores, alpha=0.8, s=60)

# 4. Linhas de corte
plt.axhline(-np.log10(0.05), linestyle='--', color='black')
plt.axvline(1, linestyle='--', color='gray')
plt.axvline(-1, linestyle='--', color='gray')

# 5. Remover "Não Significativo" da legenda
handles, labels = plot.get_legend_handles_labels()
handles_labels = [(h, l) for h, l in zip(handles, labels) if l != "Não Significativo"]
if handles_labels:
    handles, labels = zip(*handles_labels)
    plt.legend(handles, labels, bbox_to_anchor=(1.05, 1), loc='upper left', title="Phylum")
else:
    plot.legend_.remove()

# 6. Finalize plot
plt.title("Volcano Plot of Differential Abundance at Genus Level (Knockout-IL1a vs Control) ")
plt.xlabel("Log Fold Change (β)")
plt.ylabel("-log10(q-value)")
plt.tight_layout()
plt.show()


#Family grouped horizontal bar plot

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 1. Load data files
lfc = pd.read_csv("/content/drive/MyDrive/Dados_colaboração_lais/exported-ancombc-l5/lfc_slice.csv", index_col=0)
se = pd.read_csv("/content/drive/MyDrive/Dados_colaboração_lais/exported-ancombc-l5/se_slice.csv", index_col=0)
qval = pd.read_csv("/content/drive/MyDrive/Dados_colaboração_lais/exported-ancombc-l5/q_val_slice.csv", index_col=0)

# 2. Define comparisson of interest 
coluna = "groupKnockout-IL1a"
df = pd.DataFrame({
    "taxon": lfc.index,
    "lfc": lfc[coluna],
    "se": se[coluna],
    "qval": qval[coluna]
})

# 3. Calculate z-score
df["zscore"] = df["lfc"] / df["se"]

# 4. Extract family and phylum
def extract_family(t):
    for part in t.split(";"):
        if part.startswith("f__"):
            return part[3:] or "Unassigned"
    return "Unassigned"

def extract_phylum(t):
    for part in t.split(";"):
        if part.startswith("p__"):
            return part[3:] or "Unassigned"
    return "Unassigned"

df["family"] = df["taxon"].apply(extract_family)
df["phylum"] = df["taxon"].apply(extract_phylum)

# 5. Filters
target_phylum = ["Bacteroidota", "Firmicutes", "Actinobacteriota"]
df_sig = df[(df["qval"] < 0.050) & (df["phylum"].isin(target_phylum))]

# 6. Select top 20 with higher |z-score| e without duplicates
df_top = (
    df_sig.reindex(df_sig["zscore"].abs().sort_values(ascending=False).index)
    .drop_duplicates("family")
    .head(20)
)

# 7. Remove ou rename families undentified
df_top["family"] = df_top.apply(
    lambda row: f"Unassigned_{row['phylum']}" if row["family"] in ["Unassigned", "uncultured", "", None] else row["family"],
    axis=1
)

# 8. Order to plot
df_top = df_top.sort_values(["phylum", "zscore"])
df_top["family"] = pd.Categorical(df_top["family"], categories=df_top["family"], ordered=True)

# 9. Color pallet for each phylum
cores = dict(zip(df_top["phylum"].unique(), sns.color_palette("Set2", df_top["phylum"].nunique())))

# 10. Graph
plt.figure(figsize=(10, 8))
sns.barplot(
    data=df_top,
    y="family",
    x="zscore",
    hue="phylum",
    dodge=False,
    palette=cores
)

plt.axvline(0, color="gray", linestyle="--")
plt.xlabel("Z-score")
plt.ylabel("Family")
plt.title("Top Differentially Abundant Families\nfrom Bacteroidota, Firmicutes and Actinobacteriota")
plt.legend(title="Phylum", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.tight_layout()
plt.show()

PCoA 
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Carregar PCoA- UNWEIGHTED
ordination_unweighted = pd.read_csv("/home/gabrielacastilho/exported_unifrac_pcoa/ordination_unweighted.txt", sep="\t", skiprows=9, usecols=[0, 1, 2],
                         header=None, names=["SampleID", "PC1", "PC2"])
# Unir pelo ID
ordination_unweighted = ordination_unweighted.merge(metadata, left_on="SampleID", right_on="sample-id", how="left")

custom_palette = {
    "Controle": "white",
    "Knockout-IL1a": "firebrick",
    "Knockout-IL1aR": "blue"
}

# Plot
plt.figure(figsize=(6,6))
sns.scatterplot(
    data=ordination_unweighted,
    x="PC1",
    y="PC2",
    hue="group",  # substitua pelo nome real da coluna do grupo
    palette=custom_palette,
    s=100,
    edgecolor="black",
    linewidth=1,
)
plt.axhline(0, color='gray', linestyle='--')
plt.axvline(0, color='gray', linestyle='--')
plt.xlabel("PC1 (36,49% variance explained)") #valores obtidos diretamente no documento ordination em Proportion explained
plt.ylabel("PC2 (16,99% variance explained)")
plt.title("PCoA - Unweighted UniFrac")
plt.tight_layout()
plt.show()

WEIGHTED

ordination_weighted = pd.read_csv("/home/gabrielacastilho/exported_unifrac_pcoa/ordination_weighted.txt", sep="\t", skiprows=9, usecols=[0, 1, 2],
                         header=None, names=["SampleID", "PC1", "PC2"])
ordination_weighted.head()


# Carregar metadata
metadata = pd.read_csv("metadata.tsv", sep="\t")

# Unir pelo ID
ordination_weighted = ordination_weighted.merge(metadata, left_on="SampleID", right_on="sample-id")

custom_palette = {
    "Controle": "white",
    "Knockout-IL1a": "firebrick",
    "Knockout-IL1aR": "blue"
}

# Plot
plt.figure(figsize=(6,6))
sns.scatterplot(
    data=ordination_weighted,
    x="PC1",
    y="PC2",
    hue="group",  # substitua pelo nome real da coluna do grupo
    palette=custom_palette,
    s=100,
    edgecolor="black",
    linewidth=1,
)
plt.axhline(0, color='gray', linestyle='--')
plt.axvline(0, color='gray', linestyle='--')
plt.xlabel("PC1 (41,03% variance explained)") #valores obtidos diretamente no documento ordination em Proportion explained
plt.ylabel("PC2 (28,96% variance explained)")
plt.title("PCoA - Weighted UniFrac")
plt.tight_layout()
plt.show()

BRAY-CURTIS

ordination_bray_curtis = pd.read_csv("/home/gabrielacastilho/exported_unifrac_pcoa/ordination_bray_curtis.txt", sep="\t", skiprows=9, usecols=[0, 1, 2],
                         header=None, names=["SampleID", "PC1", "PC2"])

# Unir pelo ID
ordination_bray_curtis = ordination_bray_curtis.merge(metadata, left_on="SampleID", right_on="sample-id")

custom_palette = {
    "Controle": "white",
    "Knockout-IL1a": "firebrick",
    "Knockout-IL1aR": "blue"
}

# Plot
plt.figure(figsize=(6,6))
sns.scatterplot(
    data=ordination_bray_curtis,
    x="PC1",
    y="PC2",
    hue="group",  # substitua pelo nome real da coluna do grupo
    palette=custom_palette,
    s=100,
    edgecolor="black",
    linewidth=1,
)
plt.axhline(0, color='gray', linestyle='--')
plt.axvline(0, color='gray', linestyle='--')
plt.xlabel("PC1 (44,63% variance explained)") #valores obtidos diretamente no documento ordination em Proportion explained
plt.ylabel("PC2 (27,44% variance explained)")
plt.title("PCoA - Bray-Curtis")
plt.tight_layout()
plt.show()



